// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource mongo {
//   provider = "mongodb"
//   url      = env("MONGO_URL")
// }

model User {
  id           Int            @id @default(autoincrement())
  lastname     String         @db.VarChar(255)
  firstname    String         @db.VarChar(255)
  email        String         @unique @db.VarChar(255)
  password     String         @db.VarChar(255)
  isActive     Boolean        @default(false)
  roles        String[]
  Notification Notification[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  // isDeleted Boolean  @default(false)
  Message      Message[]
}

model Passwordreset {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(255)
  token     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
}

model Channel {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  limit     Int
  Message   Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // isDeleted Boolean  @default(false)
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  message   String
  isRead    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // isDeleted Boolean  @default(false)

  // Enable real-time subscriptions for the Notification model
  // @aws_subscribe(mutations: ["*"])
}

model Message {
  id        Int      @id @default(autoincrement())
  message   String   @db.VarChar(255)
  channel   Channel  @relation(fields: [channelId], references: [id])
  channelId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // isDeleted Boolean  @default(false)
}

model Antispam {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(255)
  ip        String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // isDeleted Boolean  @default(false)
}
